{"version":3,"sources":["../src/Vector.js","../src/Vectors.js","../src/Line.js","../src/Polygons.js","../src/Polygon.js","../src/index.js","renderArea.js","main.js"],"names":["Vector","x","y","z","vector","Error","num","Math","sqrt","squareLength","l","length","Vectors","arrVector","clear","v","push","idx","reverse","index","splice","Line","a","b","c","start","end","A","B","C","abs","POLY_SPLIT_EPS","t","tempVec","subtraction","norm","multiplication","result","addition","point","n","m","dir","u","dot","s","line","d","det","inside","minimum","maximum","getStart","getEnd","initFromNumbers","initFromVector","l1","l2","q1","q2","p","min","max","Polygons","bisector","leftTriangle","Polygon","trapezoid","rightTriangle","p1_exist","p2_exist","p3_exist","p4_exist","leftTriangleSquare","trapezoidSquare","rightTriangleSquare","totalSquare","countSquare_signed","pointsCount","poly","size","i","get","square","cutLine","polygonSize","round","polygon","isClockwise","poly1","poly2","countSquare","minCutLine_exists","minSqLength","Number","MAX_VALUE","j","p1","p2","subPoly","createSubPoly","cut","tempCut","getCut","value","sqLength","isSegmentInsidePoly","push_back","distance","cnt","getSegmentNearestPoint","polygonCentroid","ri","insert","isPointInsidePoly","sum","empty","res","getBisector","v1","v2","v3","v4","l1s","getLineNearestPoint","cls_l1sl2","crossLineSegment","l2e","p4","cls_l2el1","l2s","p3","cls_l2sl1","l1e","cls_l1el2","tgA","getTanAngle","S","hh","pp","sn1","sn2","createPolygons","findCutLineRes","findCutLine","line1","line2","pc1","polySize","pc2","directedLine","crossSegmentSegment","excludeLine1","excludeLine2","css","getPointAlong","points","division","RenderArea","options","ctx","beginPath","moveTo","lineTo","closePath","globalAlpha","fill","stroke","clearRect","canvasSize","top","left","width","height","showHelp","font","fillStyle","fillText","squareToCut","scale","selectedPolygon","polygons","selectedPoint","save","translate","offset_x","offset_y","color","polygons_color","strokeStyle","lineWidth","drawPoly","showInfo","countCenter","splitReturn","split","np","findNearestPoint","mouse","pointOutlineSize","drawCircle","pointSize","restore","paintEvent","e","mouseLeftPress","clientX","mouse_x","clientY","mouse_y","ptocLength","paint","button","console","log","delta","deltaY","splitNearestEdge","minDist","dist","findDistance","keyCode","shiftKey","splitReuslt","initPolygons","Array","context","centerX","centerY","r","arc","PI","ke","canvas","offsetTop","offsetLeft","renderArea","document","getElementById","getContext","window","innerWidth","innerHeight","onresize","onload","onkeyup","keyPressEvent","onwheel","wheelEvent","onmousemove","mouseMoveEvent","onmouseup","mouseReleaseEvent","onmousedown","mousePressEvent","oncontextmenu"],"mappings":"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","file":"main.47935252.js","sourceRoot":"../app","sourcesContent":["/**\r\n * Created by jyp on 2016-05-16.\r\n */\r\n\r\n/**\r\n *\r\n * @param x\r\n * @param y\r\n * @param z\r\n * @constructor\r\n */\r\nexport default class Vector {\r\n  constructor(x, y, z) {\r\n    this.x = x, this.y = y, this.z = z;\r\n  }\r\n  addition = vector => {\r\n    if (!vector instanceof Vector)\r\n      throw new Error('param vector was not Vector');\r\n    return new Vector(this.x + vector.x, this.y + vector.y, this.z + vector.z);\r\n  }\r\n\r\n  subtraction = vector => {\r\n    if (!vector instanceof Vector)\r\n      throw new Error('param vector was not Vector');\r\n    return new Vector(this.x - vector.x, this.y - vector.y, this.z - vector.z);\r\n  }\r\n\r\n  multiplication = num => {\r\n    if (typeof num !== 'number')\r\n      throw new Error('param num was not numeric');\r\n    return new Vector(this.x * num, this.y * num, this.z * num);\r\n  };\r\n\r\n  division = num => {\r\n    if (typeof num !== 'number')\r\n      throw new Error(\"param num was not numeric\");\r\n    return new Vector(this.x / num, this.y / num, this.z / num);\r\n  }\r\n\r\n  dot = vector => {\r\n    if (!vector instanceof Vector)\r\n      throw new Error('param v was not Vector');\r\n    return (this.x * vector.x + this.y * vector.y + this.z + vector.z);\r\n  }\r\n\r\n  length = () => {\r\n    return Math.sqrt(this.squareLength());\r\n  }\r\n\r\n  squareLength = () => {\r\n    return ((this.x * this.x) + (this.y * this.y) + (this.z + this.z));\r\n  }\r\n\r\n  norm = () => {\r\n    var l = this.length();\r\n    if (l == 0) {\r\n      return new Vector()\r\n    } else {\r\n      return new Vector(this.x / l, this.y / l, this.z / l);\r\n    }\r\n  }\r\n\r\n  equals = vector => {\r\n    if (!vector instanceof Vector)\r\n      throw new Error('param v was not Vector');\r\n    if (this.x == vector.x && this.y == vector.y && this.z == vector.z) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  toString = () => {\r\n    return `vector(${this.x}, ${this.y}, ${this.z})`;\r\n  }\r\n}\r\n","import Vector from './Vector.js';\r\n\r\nexport default class Vectors {\r\n    constructor() {\r\n        this.arrVector = [];\r\n    }\r\n    clear = () => {\r\n        this.arrVector.clear();\r\n    }\r\n\r\n    push_back = v => {\r\n        if (!v instanceof Vector)\r\n            throw new Error(\"param v was not Vector type\");\r\n        this.arrVector.push(v);\r\n    }\r\n\r\n    get = idx => {\r\n        if (typeof idx === 'number' && this.arrVector.length > idx)\r\n            return this.arrVector[idx];\r\n    }\r\n\r\n    size = () => {\r\n        return this.arrVector.length;\r\n    }\r\n\r\n    reverse = () => {\r\n        this.arrVector.reverse();\r\n    }\r\n\r\n    empty = () => {\r\n        return this.arrVector.length === 0 ? true : false;\r\n    }\r\n\r\n    insert = (index, vector) => {\r\n        if (!vector instanceof Vector)\r\n            throw new Error(\"param vector was not Vector type\");\r\n        this.arrVector.splice(index, 0, vector);\r\n    }\r\n}","/**\r\n * Created by jyp on 2016-05-16.\r\n */\r\nimport Vector from './Vector.js';\r\n\r\nexport default class Line {\r\n    static POLY_SPLIT_EPS = 1E-6;\r\n\r\n    constructor(a, b, c) {\r\n        this.A = null;\r\n        this.B = null;\r\n        this.C = null;\r\n        this.start = null;\r\n        this.end = null;\r\n\r\n        if (typeof a === 'number' && typeof b === 'number' && typeof c === 'number') {\r\n            this.initFromNumbers(a, b, c);\r\n        } else if (a instanceof Vector && b instanceof Vector) {\r\n            this.initFromVector(a, b);\r\n        }\r\n    }\r\n\r\n    initFromVector = (start, end) => {\r\n        if (!start instanceof Vector) throw new Error(\"param start was not Vector Type\");\r\n        if (!end instanceof Vector) throw new Error(\"param end was not Vector Type\");\r\n\r\n        this.A = start.y - end.y;\r\n        this.B = end.x - start.x;\r\n        this.C = start.x * end.y - end.x * start.y;\r\n        this.start = start;\r\n        this.end = end;\r\n    }\r\n\r\n    initFromNumbers = (A, B, C) => {\r\n        if (typeof A === \"number\" && typeof B === \"number\" && typeof C === \"number\") {\r\n            this.start = new Vector();\r\n            this.end = new Vector();\r\n\r\n            if (Math.abs(A) <= Line.POLY_SPLIT_EPS && Math.abs(B) >= Line.POLY_SPLIT_EPS) {\r\n                this.start.x = -1000;\r\n                this.start.y = -(C / B);\r\n\r\n                this.end.x = 1000;\r\n                this.end.y = this.start.y;\r\n            }\r\n            else if (Math.abs(B) <= Line.POLY_SPLIT_EPS && Math.abs(A) >= Line.POLY_SPLIT_EPS) {\r\n                this.start.x = -(C / A);\r\n                this.start.y = -1000;\r\n                this.end.x = this.start.x;\r\n                this.end.y = 1000;\r\n            }\r\n            else {\r\n                this.start.x = -1000;\r\n                this.start.y = -((A * this.start.x + C) / B);\r\n\r\n                this.end.x = 1000;\r\n                this.end.y = -((A * this.end.x + C) / B);\r\n            }\r\n        }\r\n        this.A = A; this.B = B; this.C = C;\r\n    }\r\n\r\n    getStart = () => {\r\n        return this.start;\r\n    }\r\n    getEnd = () => {\r\n        return this.end;\r\n    };\r\n\r\n    /**\r\n * 길이\r\n * @returns {number}\r\n */\r\n    length = () => {\r\n        var x = this.end.x - this.start.x;\r\n        var y = this.end.y - this.start.y;\r\n        return Math.sqrt(x * x + y * y);\r\n    }\r\n\r\n    squareLength = () => {\r\n        var x = this.end.x - this.start.x;\r\n        var y = this.end.y - this.start.y;\r\n        return (x * x + y * y);\r\n    }\r\n\r\n    reverse = () => {\r\n        return new Line(this.end, this.start);\r\n    };\r\n\r\n    getPointAlong = t => {\r\n        var tempVec = this.end.subtraction(this.start).norm().multiplication(t);\r\n        var result = this.start.addition(tempVec);\r\n        return result;\r\n    }\r\n\r\n    getDistance = point => {\r\n        if (typeof point !== 'undefined' && point instanceof Vector) {\r\n            var n = this.A * point.x + this.B * point.y + this.C;\r\n            var m = Math.sqrt(this.A * this.A + this.B * this.B);\r\n\r\n            return Math.abs(n / m);\r\n        }\r\n    }\r\n\r\n    getLineNearestPoint = point => {\r\n        if (typeof point !== 'undefined' && point instanceof Vector) {\r\n            var dir = new Vector(this.B, -this.A);\r\n            var u = (point.subtraction(this.start)).dot(dir) / dir.squareLength();\r\n            return this.start.addition(dir.multiplication(u));\r\n        }\r\n    }\r\n\r\n    getSegmentNearestPoint = point => {\r\n        if (typeof point === 'undefined') {\r\n            throw new Error(\"param point was undefined\");\r\n        }\r\n        if (!point instanceof Vector) {\r\n            throw new Error(\"param point was not Vector Type\");\r\n        }\r\n        var dir = new Vector(this.B, -this.A, 0);\r\n        var u = (point.subtraction(this.start)).dot(dir) / dir.squareLength();\r\n\r\n        if (u < 0)\r\n            return this.start;\r\n        else if (u > 1)\r\n            return this.end;\r\n        else\r\n            return this.start.addition(dir.multiplication(u));\r\n    }\r\n\r\n    pointSide = point => {\r\n        var s = this.A.multiplication(point.x - this.start.x).addition(B.multiplication(point.x - this.start.y));\r\n        return (s > 0 ? 1 : (s < 0 ? -1 : 0));\r\n    }\r\n\r\n    crossLineSegment = line => {\r\n        var d = Line.det(this.A, this.B, line.A, line.B);\r\n        var result = new Vector();\r\n        if (d == 0) return 0;\r\n\r\n        result.x = -(Line.det(this.C, this.B, line.C, line.B) / d);\r\n        result.y = -(Line.det(this.A, this.C, line.A, line.C) / d);\r\n\r\n        return {\r\n            \"result\": result, \"value\": Line.inside(result.x, Line.minimum(line.start.x, line.end.x), Line.maximum(line.start.x, line.end.x)) &&\r\n                Line.inside(result.y, Line.minimum(line.start.y, line.end.y), Line.maximum(line.start.y, line.end.y))\r\n        };\r\n    }\r\n\r\n    crossSegmentSegment = line => {\r\n        var d = Line.det(this.A, this.B, line.A, line.B);\r\n        var result = new Vector();\r\n        if (d == 0) return 0;\r\n\r\n\r\n        result.x = - Line.det(this.C, this.B, line.C, line.B) / d;\r\n        result.y = - Line.det(this.A, this.C, line.A, line.C) / d;\r\n\r\n        return {\r\n            \"result\": result, \"value\": Line.inside(result.x, Line.minimum(this.start.x, this.end.x), Line.maximum(this.start.x, this.end.x)) &&\r\n                Line.inside(result.y, Line.minimum(this.start.y, this.end.y), Line.maximum(this.start.y, this.end.y)) &&\r\n                Line.inside(result.x, Line.minimum(line.start.x, line.end.x), Line.maximum(line.start.x, line.end.x)) &&\r\n                Line.inside(result.y, Line.minimum(line.start.y, line.end.y), Line.maximum(line.start.y, line.end.y))\r\n        };\r\n    }\r\n\r\n    crossLineLine = line => {\r\n        var d = Line.det(this.A, this.B, line.A, line.B);\r\n        var result = new Vector();\r\n        if (d == 0) return 0;\r\n\r\n        result.x = - Line.det(this.C, this.B, line.C, line.B) / d;\r\n        result.y = - Line.det(this.A, this.C, line.A, line.C) / d;\r\n\r\n        return { \"result\": result, \"value\": 1 };\r\n    }\r\n\r\n    static getBisector = (l1, l2) => {\r\n        var q1 = Math.sqrt(l1.A * l1.A + l1.B * l1.B);\r\n        var q2 = Math.sqrt(l2.A * l2.A + l2.B * l2.B);\r\n\r\n        var A = l1.A / q1 - l2.A / q2;\r\n        var B = l1.B / q1 - l2.B / q2;\r\n        var C = l1.C / q1 - l2.C / q2;\r\n\r\n        return { \"result\": new Line(A, B, C), \"l1\": l1, \"l2\": l2 };\r\n    }\r\n\r\n    static getTanAngle = (l1, l2) => {\r\n        return (l1.A * l2.B - l2.A * l1.B) / (l1.A * l2.A + l1.B * l2.B);\r\n    }\r\n\r\n    static directedLine = (p, d) => {\r\n        if (!p instanceof Vector) throw new Error(\"param p was not Vector Type\");\r\n        if (!d instanceof Vector) throw new Error(\"param d was not Vector Type\");\r\n        var l = new Line(p, p.addition(d));\r\n        return l;\r\n    }\r\n\r\n    static inside = (v, min, max) => { return (((min) <= (v) + (Line.POLY_SPLIT_EPS)) && ((v) <= (max) + (Line.POLY_SPLIT_EPS))) };\r\n    static det = (a, b, c, d) => { return (((a) * (d)) - ((b) * (c))) };\r\n\r\n    static maximum = (a, b) => { return (((a) < (b)) ? (b) : (a)) };\r\n    static minimum = (a, b) => { return (((a) > (b)) ? (b) : (a)) };\r\n\r\n    toString = () => {\r\n        return \"[\" + this.A + \", \" + this.B + \", \" + this.C + \"]-{\" + this.getStart() + \", \" + this.getEnd() + \"}\";\r\n    };\r\n}","import Polygon from './Polygon.js';\r\nimport Line from './Line.js';\r\n\r\nexport default class Polygons {\r\n\r\n    constructor() {\r\n        this.bisector = new Line();\r\n\r\n        this.leftTriangle = new Polygon();\r\n        this.trapezoid = new Polygon();\r\n        this.rightTriangle = new Polygon();\r\n\r\n        this.p1_exist = false;\r\n        this.p2_exist = false;\r\n        this.p3_exist = false;\r\n        this.p4_exist = false;\r\n\r\n        this.leftTriangleSquare = 0;\r\n        this.trapezoidSquare = 0;\r\n        this.rightTriangleSquare = 0;\r\n        this.totalSquare = 0;\r\n    }\r\n};","import Vector from './Vector.js';\r\nimport Vectors from './Vectors.js';\r\nimport Line from './Line.js';\r\nimport Polygons from './Polygons.js';\r\n// const Vector = require('./Vector.js');\r\n// const Vectors = require('./Vectors');\r\n// const Line = require('./Line.js');\r\n\r\nexport default class Polygon {\r\n  static POLY_SPLIT_EPS = 1E-6;\r\n\r\n  constructor(v) {\r\n    if (typeof v === 'undefined') {\r\n      v = new Vectors();\r\n    } else if (!v instanceof Vectors) {\r\n      throw new Error(\"param v was not Vector Type\");\r\n    }\r\n    this.poly = v;\r\n  }\r\n\r\n  countSquare = () => {\r\n    var t = this.countSquare_signed();\r\n    if (typeof t === 'number')\r\n      return t < 0 ? t * -1 : t; // absolute\r\n  }\r\n\r\n  countSquare_signed = () => {\r\n    var pointsCount = this.poly.size();\r\n    if (pointsCount < 3) {\r\n      return 0;\r\n    }\r\n\r\n    var result = 0.0;\r\n    for (var i = 0; i < pointsCount; i++) {\r\n      if (i == 0)\r\n        result += this.poly.get(i).x * (this.poly.get(pointsCount - 1).y - this.poly.get(i + 1).y);\r\n      else if (i == pointsCount - 1)\r\n        result += this.poly.get(i).x * (this.poly.get(i - 1).y - this.poly.get(0).y);\r\n      else\r\n        result += this.poly.get(i).x * (this.poly.get(i - 1).y - this.poly.get(i + 1).y);\r\n    }\r\n    return result / 2.0;\r\n  }\r\n\r\n  split = (square, cutLine) => {\r\n    if (typeof square !== 'number') {\r\n      throw new Error(\"param square was not defined\");\r\n    }\r\n\r\n    var polygonSize = Math.round(this.poly.size());\r\n    var polygon = this.poly;\r\n    if (!this.isClockwise()) {\r\n      polygon.arrVector.reverse();\r\n    }\r\n\r\n    var poly1 = new Polygon();\r\n    var poly2 = new Polygon();\r\n\r\n    if (this.countSquare() - square <= Polygon.POLY_SPLIT_EPS) {\r\n      poly1 = this;\r\n      return {\r\n        \"value\": 0,\r\n        \"poly1\": poly1,\r\n        \"poly2\": poly2,\r\n        \"cutLine\": cutLine\r\n      };\r\n    }\r\n\r\n    var minCutLine_exists = 0;\r\n    var minSqLength = Number.MAX_VALUE;\r\n\r\n    for (var i = 0; i < polygonSize - 1; i++) {\r\n      for (var j = i + 1; j < polygonSize; j++) {\r\n        var p1 = new Polygon();\r\n        var p2 = new Polygon();\r\n\r\n        var subPoly = Polygon.createSubPoly(polygon, i, j, p1, p2);\r\n        p1 = subPoly.poly1;\r\n        p2 = subPoly.poly2;\r\n\r\n        var l1 = new Line(polygon.get(i), polygon.get(i + 1));\r\n        var l2 = new Line(polygon.get(j), polygon.get((j + 1) < polygonSize ? (j + 1) : 0));\r\n        var cut = new Line();\r\n\r\n        var tempCut = Polygon.getCut(l1, l2, square, p1, p2, cut);\r\n        cut = tempCut.cut;\r\n\r\n\r\n        if (tempCut.value) {\r\n          var sqLength = cut.squareLength();\r\n          if (sqLength < minSqLength && Polygon.isSegmentInsidePoly(polygon, cut, i, j)) {\r\n            minSqLength = sqLength;\r\n            poly1 = p1;\r\n            poly2 = p2;\r\n            cutLine = cut;\r\n            minCutLine_exists = 1;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    if (minCutLine_exists) {\r\n      poly1.push_back(cutLine.getStart());\r\n      poly1.push_back(cutLine.getEnd());\r\n\r\n      poly2.push_back(cutLine.getEnd());\r\n      poly2.push_back(cutLine.getStart());\r\n\r\n      return {\r\n        \"value\": 1,\r\n        \"poly1\": poly1,\r\n        \"poly2\": poly2,\r\n        \"cutLine\": cutLine\r\n      };\r\n    } else {\r\n      poly1 = new Polygon(polygon);\r\n      return {\r\n        \"value\": 0,\r\n        \"poly1\": poly1,\r\n        \"poly2\": poly2,\r\n        \"cutLine\": cutLine\r\n      };\r\n    }\r\n  }\r\n\r\n  indDistance = (point) => {\r\n    if (typeof point === 'undefined') {\r\n      throw new Error(\"param point was undefined\");\r\n    }\r\n    if (!point instanceof Vector) {\r\n      throw new Error(\"param point was not Vector Type\");\r\n    }\r\n\r\n    var distance = Number.MAX_VALUE;\r\n\r\n    for (var i = 0, cnt = Math.round(this.poly.size() - 1); i < cnt; i++) {\r\n      var line = new Line();\r\n      line.initFromVector(this.poly.get(i), this.poly.get(i + 1));\r\n      var p = line.getSegmentNearestPoint(point);\r\n      var l = p.subtraction(point).length();\r\n      if (l < distance)\r\n        distance = l;\r\n    }\r\n    var line = new Line();\r\n    line.initFromVector(this.poly.get(this.poly.size() - 1), this.poly.get(0));\r\n    var p = line.getSegmentNearestPoint(point);\r\n    var l = (p.subtraction(point)).length();\r\n    if (l < distance)\r\n      distance = l;\r\n    return distance;\r\n  };\r\n\r\n  findDistance = (point) => {\r\n    if (typeof point === 'undefined') {\r\n      throw new Error(\"param point was undefined\");\r\n    }\r\n    if (!point instanceof Vector) {\r\n      throw new Error(\"param point was not Vector Type\");\r\n    }\r\n\r\n    var distance = Number.MAX_VALUE;\r\n\r\n    for (var i = 0, cnt = Math.round(this.poly.size() - 1); i < cnt; i++) {\r\n      var line = new Line();\r\n      line.initFromVector(this.poly.get(i), this.poly.get(i + 1));\r\n      var p = line.getSegmentNearestPoint(point);\r\n      var l = p.subtraction(point).length();\r\n      if (l < distance)\r\n        distance = l;\r\n    }\r\n    var line = new Line();\r\n    line.initFromVector(this.poly.get(this.poly.size() - 1), this.poly.get(0));\r\n    var p = line.getSegmentNearestPoint(point);\r\n    var l = (p.subtraction(point)).length();\r\n    if (l < distance)\r\n      distance = l;\r\n    return distance;\r\n  };\r\n\r\n  findDistance = (point) => {\r\n    if (typeof point === 'undefined') {\r\n      throw new Error(\"param point was undefined\");\r\n    }\r\n    if (!point instanceof Vector) {\r\n      throw new Error(\"param point was not Vector Type\");\r\n    }\r\n\r\n    var distance = Number.MAX_VALUE;\r\n\r\n    for (var i = 0, cnt = Math.round(this.poly.size() - 1); i < cnt; i++) {\r\n      var line = new Line();\r\n      line.initFromVector(this.poly.get(i), this.poly.get(i + 1));\r\n      var p = line.getSegmentNearestPoint(point);\r\n      var l = p.subtraction(point).length();\r\n      if (l < distance)\r\n        distance = l;\r\n    }\r\n    var line = new Line();\r\n    line.initFromVector(this.poly.get(this.poly.size() - 1), this.poly.get(0));\r\n    var p = line.getSegmentNearestPoint(point);\r\n    var l = (p.subtraction(point)).length();\r\n    if (l < distance)\r\n      distance = l;\r\n    return distance;\r\n  };\r\n\r\n  findNearestPoint = (point) => {\r\n    if (typeof point === 'undefined') {\r\n      throw new Error(\"param point was undefined\");\r\n    }\r\n    if (!point instanceof Vector) {\r\n      throw new Error(\"param point was not Vector Type\");\r\n    }\r\n    var result = null; //Vector type\r\n    var distance = Number.MAX_VALUE;\r\n\r\n    for (var i = 0, cnt = Math.round(this.poly.size() - 1); i < cnt; i++) {\r\n      var line = new Line()\r\n      line.initFromVector(this.poly.get(i), this.poly.get(i + 1));\r\n      var p = line.getSegmentNearestPoint(point);\r\n      var l = p.subtraction(point).length();\r\n      if (l < distance) {\r\n        distance = l;\r\n        result = p;\r\n      }\r\n    }\r\n    var line = new Line();\r\n    line.initFromVector(this.poly.get(this.poly.size() - 1), this.poly.get(0));\r\n    var p = line.getSegmentNearestPoint(point);\r\n    var l = (p.subtraction(point)).length();\r\n    if (l < distance) {\r\n      distance = l;\r\n      result = p;\r\n    }\r\n    distance; //just remove warning\r\n    return result;\r\n  };\r\n\r\n  countCenter = () => {\r\n    return Polygon.polygonCentroid(this.poly);\r\n  };\r\n\r\n  splitNearestEdge = (point) => {\r\n    if (typeof point === 'undefined')\r\n      throw new Error(\"param point was undefined\");\r\n    if (!point instanceof Vector)\r\n      throw new Error(\"param point was not Vector Type\");\r\n\r\n    var result;\r\n    var ri = -1;\r\n    var distance = Number.MAX_VALUE;\r\n\r\n    for (var i = 0, cnt = this.poly.size() - 1; i < cnt; i++) {\r\n      var line = new Line(this.poly.get(i), this.poly.get(i + 1));\r\n      var p = line.getSegmentNearestPoint(point);\r\n      var l = p.subtraction(point).length();\r\n      if (l < distance) {\r\n        distance = l;\r\n        ri = i;\r\n        result = p;\r\n      }\r\n    }\r\n    var line = new Line(this.poly.get(this.poly.size() - 1), this.poly.get(0));\r\n    var p = line.getSegmentNearestPoint(point);\r\n    var l = p.subtraction(point).length();\r\n    if (l < distance) {\r\n      distance = l;\r\n      ri = this.poly.size() - 1;\r\n      result = p;\r\n    }\r\n\r\n    if (ri != -1) {\r\n      this.poly.insert(ri + 1, result);\r\n    }\r\n\r\n  };\r\n\r\n  isPointInside = (point) => {\r\n    if (typeof point === 'undefined')\r\n      throw new Error(\"param point was undefined\");\r\n    if (!point instanceof Vector)\r\n      throw new Error(\"param point was not Vector Type\");\r\n\r\n    return Polygon.isPointInsidePoly(this.poly, point);\r\n  };\r\n\r\n  isClockwise = () => {\r\n    var sum = 0;\r\n    var t = Math.round(this.poly.size() - 1);\r\n    for (var i = 0; i < t; i++) {\r\n      sum += (this.poly.get(i + 1).x - this.poly.get(i).x) * (this.poly.get(i + 1).y + this.poly.get(i).y);\r\n    }\r\n    sum += (this.poly.get(0).x - this.poly.get(t).x) * (this.poly.get(0).y + this.poly.get(t).y);\r\n    return sum <= 0;\r\n  };\r\n\r\n  getVectors = () => {\r\n    return this.poly;\r\n  };\r\n\r\n  push_back = (v) => {\r\n    if (typeof v !== 'undefined' && v instanceof Vector)\r\n      this.poly.push_back(v);\r\n  };\r\n\r\n  empty = () => {\r\n    return this.poly.empty();\r\n  };\r\n\r\n  get = (idx) => {\r\n    if (typeof idx !== 'number')\r\n      throw new Error(\"param idx was not number type\");\r\n    if (this.poly.size() < idx)\r\n      throw new Error(\"param idx was bigger then Vectors size\");\r\n    return this.poly.get(idx);\r\n  };\r\n\r\n  setPolygon = (p) => {\r\n    if (p instanceof Polygon) {\r\n      this.poly = p.poly;\r\n      return this;\r\n    }\r\n  };\r\n\r\n  clear = () => {\r\n    this.poly.clear();\r\n  };\r\n\r\n  size = () => {\r\n    return this.poly.size();\r\n  };\r\n\r\n  static createPolygons = (l1, l2, res) => {\r\n    if (!l1 instanceof Line)\r\n      throw new Error(\"param l1 was not Line type\");\r\n    if (!l2 instanceof Line)\r\n      throw new Error(\"param l2 was not Line type\");\r\n    if (!res instanceof Polygons)\r\n      throw new Error(\"param res was not Polygons type\");\r\n\r\n    res.bisector = Line.getBisector(l1, l2).result;\r\n    var v1 = l1.getStart(),\r\n      v2 = l1.getEnd(),\r\n      v3 = l2.getStart(),\r\n      v4 = l2.getEnd();\r\n\r\n    res.p1_exist = false;\r\n    res.p4_exist = false;\r\n\r\n    if (v1 != v4) {\r\n      var l1s = new Line(v1, res.bisector.getLineNearestPoint(v1)),\r\n        p1 = new Vector(),\r\n        cls_l1sl2 = l1s.crossLineSegment(l2, p1);\r\n\r\n      p1 = cls_l1sl2.result;\r\n      res.p1_exist = (cls_l1sl2.value && p1 != v4);\r\n      if (res.p1_exist) {\r\n        res.leftTriangle.push_back(v1);\r\n        res.leftTriangle.push_back(v4);\r\n        res.leftTriangle.push_back(p1);\r\n\r\n        res.trapezoid.push_back(p1);\r\n      } else {\r\n        res.trapezoid.push_back(v4);\r\n      }\r\n\r\n      var l2e = new Line(v4, res.bisector.getLineNearestPoint(v4)),\r\n        p4 = new Vector(),\r\n        cls_l2el1 = l2e.crossLineSegment(l1, p4);\r\n      p4 = cls_l2el1.result;\r\n      res.p4_exist = (cls_l2el1.value && p4 != v1);\r\n      if (res.p4_exist) {\r\n        res.leftTriangle.push_back(v4);\r\n        res.leftTriangle.push_back(v1);\r\n        res.leftTriangle.push_back(p4);\r\n\r\n        res.trapezoid.push_back(p4);\r\n      } else {\r\n        res.trapezoid.push_back(v1);\r\n      }\r\n    } else {\r\n      res.trapezoid.push_back(v4);\r\n      res.trapezoid.push_back(v1);\r\n    }\r\n\r\n    res.p2_exist = false;\r\n    res.p3_exist = false;\r\n    if (v2 != v3) {\r\n      var l2s = new Line(v3, res.bisector.getLineNearestPoint(v3)),\r\n        p3 = new Vector(),\r\n        cls_l2sl1 = l2s.crossLineSegment(l1, p3);\r\n      p3 = cls_l2sl1.result;\r\n      res.p3_exist = (cls_l2sl1.value && p3 != v2);\r\n      if (res.p3_exist) {\r\n        res.rightTriangle.push_back(v3);\r\n        res.rightTriangle.push_back(v2);\r\n        res.rightTriangle.push_back(p3);\r\n\r\n        res.trapezoid.push_back(p3);\r\n      } else {\r\n        res.trapezoid.push_back(v2);\r\n      }\r\n\r\n      var l1e = new Line(v2, res.bisector.getLineNearestPoint(v2)),\r\n        p2 = new Vector(),\r\n        cls_l1el2 = l1e.crossLineSegment(l2, p2);\r\n      p2 = cls_l1el2.result;\r\n      res.p2_exist = (cls_l1el2.value && p2 != v3);\r\n      if (res.p2_exist) {\r\n        res.rightTriangle.push_back(v2);\r\n        res.rightTriangle.push_back(v3);\r\n        res.rightTriangle.push_back(p2);\r\n\r\n        res.trapezoid.push_back(p2);\r\n      } else {\r\n        res.trapezoid.push_back(v3);\r\n      }\r\n    } else {\r\n      res.trapezoid.push_back(v2);\r\n      res.trapezoid.push_back(v3);\r\n    }\r\n\r\n    res.leftTriangleSquare = res.leftTriangle.countSquare();\r\n    res.trapezoidSquare = res.trapezoid.countSquare();\r\n    res.rightTriangleSquare = res.rightTriangle.countSquare();\r\n\r\n    res.totalSquare = res.leftTriangleSquare + res.trapezoidSquare + res.rightTriangleSquare;\r\n\r\n    return res;\r\n  };\r\n\r\n  static findCutLine = (square, res, cutLine) => {\r\n    if (square > res.totalSquare) {\r\n      return {\r\n        \"value\": false\r\n      };\r\n    }\r\n\r\n    if (!res.leftTriangle.empty() && square < res.leftTriangleSquare) {\r\n      var m = square / res.leftTriangleSquare;\r\n      var p = res.leftTriangle.get(1).addition(res.leftTriangle.get(2).subtraction(res.leftTriangle.get(1)).multiplication(m));\r\n      if (res.p1_exist) {\r\n        cutLine = new Line(p, res.leftTriangle.get(0));\r\n        return {\r\n          \"value\": true,\r\n          \"res\": res,\r\n          \"cutLine\": cutLine\r\n        };\r\n      } else if (res.p4_exist) {\r\n        cutLine = new Line(res.leftTriangle.get(0), p);\r\n        return {\r\n          \"value\": true,\r\n          \"res\": res,\r\n          \"cutLine\": cutLine\r\n        };\r\n      }\r\n    } else if (res.leftTriangleSquare < square && square < (res.leftTriangleSquare + res.trapezoidSquare)) {\r\n      var t = new Line(res.trapezoid.get(0), res.trapezoid.get(3));\r\n      var tgA = Line.getTanAngle(t, res.bisector);\r\n      var S = square - res.leftTriangleSquare;\r\n      var m;\r\n      if (Math.abs(tgA) > Polygon.POLY_SPLIT_EPS) {\r\n        var a = new Line(res.trapezoid.get(0), res.trapezoid.get(1)).length();\r\n        var b = new Line(res.trapezoid.get(2), res.trapezoid.get(3)).length();\r\n        var hh = 2.0 * res.trapezoidSquare / (a + b);\r\n        var d = a * a - 4.0 * tgA * S;\r\n        var h = -(-a + Math.sqrt(d)) / (2.0 * tgA);\r\n        m = h / hh;\r\n      } else {\r\n        m = S / res.trapezoidSquare;\r\n      }\r\n      var p = res.trapezoid.get(0).addition(res.trapezoid.get(3).subtraction(res.trapezoid.get(0)).multiplication(m));\r\n      var pp = res.trapezoid.get(1).addition(res.trapezoid.get(2).subtraction(res.trapezoid.get(1)).multiplication(m));\r\n\r\n      cutLine = new Line(p, pp);\r\n      return {\r\n        \"value\": true,\r\n        \"res\": res,\r\n        \"cutLine\": cutLine\r\n      };\r\n    } else if (!res.rightTriangle.empty() && square > res.leftTriangleSquare + res.trapezoidSquare) {\r\n      var S = square - res.leftTriangleSquare - res.trapezoidSquare;\r\n      var m = S / res.rightTriangleSquare;\r\n      var p = res.rightTriangle.get(2).addition(res.rightTriangle.get(1).subtraction(res.rightTriangle.get(2)).multiplication(m));\r\n      if (res.p3_exist) {\r\n        cutLine = new Line(res.rightTriangle.get(0), p);\r\n        return {\r\n          \"value\": true,\r\n          \"res\": res,\r\n          \"cutLine\": cutLine\r\n        };\r\n      } else if (res.p2_exist) {\r\n        cutLine = new Line(p, res.rightTriangle.get(0));\r\n        return {\r\n          \"value\": true,\r\n          \"res\": res,\r\n          \"cutLine\": cutLine\r\n        };\r\n      }\r\n    }\r\n    return {\r\n      \"value\": false,\r\n      \"res\": res,\r\n      \"cutLine\": cutLine\r\n    };\r\n  };\r\n\r\n  static getCut = (l1, l2, s, poly1, poly2, cut) => {\r\n    if (!l1 instanceof Line)\r\n      throw new Error(\"param l1 was not Line type\");\r\n    if (!l2 instanceof Line)\r\n      throw new Error(\"param l2 was not Line type\");\r\n    if (!poly1 instanceof Polygon)\r\n      throw new Error(\"param poly1 was not Polygon type\");\r\n    if (!poly2 instanceof Polygon)\r\n      throw new Error(\"param poly2 was not Polygon type\");\r\n    if (typeof s !== \"number\")\r\n      throw new Error(\"param s was not number type\");\r\n\r\n    var sn1 = s + poly2.countSquare_signed();\r\n    var sn2 = s + poly1.countSquare_signed();\r\n\r\n    if (sn1 > 0) {\r\n      var res = new Polygons();\r\n      res = Polygon.createPolygons(l1, l2, res);\r\n\r\n      var findCutLineRes = Polygon.findCutLine(sn1, res, cut),\r\n        cut = findCutLineRes.cutLine;\r\n      if (findCutLineRes.value) {\r\n        return {\r\n          \"value\": true,\r\n          \"cut\": cut\r\n        };\r\n      }\r\n    } else if (sn2 > 0) {\r\n      var res = new Polygons();\r\n      res = Polygon.createPolygons(l2, l1, res);\r\n\r\n      var findCutLineRes = Polygon.findCutLine(sn2, res, cut),\r\n        cut = findCutLineRes.cutLine;\r\n      if (findCutLineRes.value) {\r\n        cut = cut.reverse();\r\n        return {\r\n          \"value\": true,\r\n          \"cut\": cut\r\n        };\r\n      }\r\n    }\r\n\r\n    return {\r\n      \"value\": false,\r\n      \"cut\": cut\r\n    };\r\n\r\n  };\r\n\r\n\r\n  /**\r\n   *\r\n   * @param poly {Vectors}\r\n   * @param line1 {number}\r\n   * @param line2 {number}\r\n   * @returns {{poly1: Polygon, poly2: Polygon}}\r\n   */\r\n  static createSubPoly = (poly, line1, line2, poly1, poly2) => {\r\n    if (!poly instanceof Vectors) {\r\n      throw new Error(\"param poly was not Vectors Type\");\r\n    }\r\n\r\n    poly1 = new Polygon(),\r\n      poly2 = new Polygon();\r\n\r\n    var pc1 = line2 - line1;\r\n    for (var i = 1; i <= pc1; i++) {\r\n      poly1.push_back(poly.get(i + line1));\r\n    }\r\n\r\n    var polySize = poly.size();\r\n    var pc2 = polySize - pc1;\r\n\r\n    for (var i = 1; i <= pc2; i++) {\r\n      poly2.push_back(poly.get((i + line2) % polySize));\r\n    }\r\n\r\n    return {\r\n      \"poly1\": poly1,\r\n      \"poly2\": poly2\r\n    };\r\n  };\r\n\r\n  static isPointInsidePoly = (poly, point) => {\r\n    var pointsCount = Math.round(poly.size() - 1);\r\n    var l = Line.directedLine(point, new Vector(0.0, 1e100));\r\n    var result = 0;\r\n    var res;\r\n    var v;\r\n    for (var i = 0; i < pointsCount; i++) {\r\n      var line = new Line(poly.get(i), poly.get(i + 1));\r\n      res = l.crossSegmentSegment(line);\r\n      result += res.value;\r\n    }\r\n    var line = new Line(poly.get(pointsCount), poly.get(0));\r\n    res = l.crossSegmentSegment(line);\r\n    result += res.value;\r\n    return result % 2 != 0;\r\n  };\r\n\r\n  static isSegmentInsidePoly = (poly, l, excludeLine1, excludeLine2) => {\r\n    var pointsCount = poly.size();\r\n    for (var i = 0; i < pointsCount; i++) {\r\n      if (i != excludeLine1 && i != excludeLine2) {\r\n        var p1 = poly.get(i);\r\n        var p2 = poly.get(i + 1 < pointsCount ? i + 1 : 0);\r\n        var p = new Vector(),\r\n          css = new Line(p1, p2).crossSegmentSegment(l, p);\r\n        p = css.result;\r\n\r\n        if (css.value) {\r\n          if ((p1.subtraction(p)).squareLength() > Polygon.POLY_SPLIT_EPS) {\r\n            if ((p2.subtraction(p)).squareLength() > Polygon.POLY_SPLIT_EPS) {\r\n\r\n              return 0;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return Polygon.isPointInsidePoly(poly, l.getPointAlong(0.5));\r\n  };\r\n\r\n  static polygonCentroid = (points) => {\r\n    var n = points.size();\r\n    var result = new Vector(0, 0, 0);\r\n    for (var i = 0; i < n; i++)\r\n      result = result.addition(points.get(i));\r\n    result = result.division(n);\r\n    return result;\r\n  };\r\n}\r\n","import Vector from './Vector.js';\r\nimport Vectors from './Vectors.js';\r\nimport Line from './Line.js';\r\nimport Polygon from './Polygon.js';\r\nimport Polygons from './Polygons.js';\r\n\r\nexport { Vector, Vectors, Line, Polygon, Polygons };","//const Vecotr = require('../src/').vector;\r\nimport { Vector, Vectors, Polygon, Polygons, Line } from '../src/index.js';\r\n// import Vector from './modules/Vector.js';\r\n// import Polygon from './modules/Polygon.js';\r\n// import Polygons from './modules/Polygons.js';\r\n// import Line from './modules/Line.js';\r\n/**\r\n * Created by jyp on 2016-05-19.\r\n */\r\n\r\nexport default class RenderArea {\r\n\r\n    constructor(options) {\r\n        this.polygons = [];\r\n        this.polygons_color = [];\r\n        this.squareToCut;\r\n        this.selectedPolygon = -1;\r\n        this.showInfo = 0;\r\n        this.showHelp = 1;\r\n        this.scale = 1;\r\n        this.offset_x = 0;\r\n        this.offset_y = 0;\r\n        this.ctx = options.ctx;\r\n\r\n        this.mouseLeftPress = 0;\r\n        this.mouse_x;\r\n        this.mouse_y;\r\n        this.mouse = new Vector(0, 0, 0);\r\n        this.pointSize = 10;\r\n        this.pointOutlineSize = 3;\r\n        this.selectedPoint = -1;\r\n        this.ke = null;\r\n\r\n        this.polygons_color.push(\"darkRed\");\r\n        this.polygons_color.push(\"green\");\r\n        this.polygons_color.push(\"darkGreen\");\r\n        this.polygons_color.push(\"blue\");\r\n        this.polygons_color.push(\"darkBlue\");\r\n        this.polygons_color.push(\"cyan\");\r\n        this.polygons_color.push(\"darkCyan\");\r\n        this.polygons_color.push(\"magenta\");\r\n        this.polygons_color.push(\"darkMagenta\");\r\n        this.polygons_color.push(\"darkYellow\");\r\n        this.polygons_color.push(\"gray\");\r\n        this.polygons_color.push(\"darkGray\");\r\n\r\n\r\n        this.canvasSize = { top: this.ctx.canvas.offsetTop, left: this.ctx.canvas.offsetLeft, width: this.ctx.canvas.width, height: this.ctx.canvas.height };\r\n    }\r\n\r\n\r\n    drawPoly = (poly) => {\r\n\r\n        this.ctx.beginPath();\r\n\r\n        var point = poly.get(0);\r\n        this.ctx.moveTo(point.x, point.y);\r\n        for (var i = 1, cnt = poly.size(); i < cnt; i++) {\r\n            point = poly.get(i);\r\n            this.ctx.lineTo(point.x, point.y);\r\n        }\r\n\r\n        this.ctx.closePath();\r\n        //this.ctx.strokeStyle = \"#000000\";\r\n        //this.ctx.lineWidth = 1;\r\n        //this.ctx.fillStyle = \"rgba(0,200,0,.4)\";\r\n        this.ctx.globalAlpha = 0.1;\r\n        this.ctx.fill();\r\n        this.ctx.globalAlpha = 1;\r\n        this.ctx.stroke();\r\n\r\n    };\r\n\r\n    // findCutLine = function () {\r\n\r\n    // };\r\n\r\n    paintEvent = () => {\r\n\r\n\r\n        this.ctx.clearRect(this.canvasSize.top, this.canvasSize.left, this.canvasSize.width, this.canvasSize.height);\r\n        if (this.showHelp) {\r\n            this.ctx.font = \"13px '맑은 고딕'\";\r\n            this.ctx.fillStyle = \"#000\";\r\n            var y = 0, dy = 13 + 1.0;\r\n            this.ctx.fillText(\"Cut Area Square: \" + Number(this.squareToCut), 10, y += dy);\r\n            this.ctx.fillText(\"Current this.scale: \" + Number(this.scale), 10, y += dy);\r\n            this.ctx.fillText(\"Selected Polygon: \" + this.selectedPolygon + \" / \" + this.polygons.length, 10, y += dy);\r\n            this.ctx.fillText(\"Selected Vertex: \" + this.selectedPoint, 10, y += dy);\r\n            this.ctx.fillText(\"Q/W - increase/decrease cut area square to 100\", 10, y += dy);\r\n            this.ctx.fillText(\"q/w - increase/decrease cut area square to 10\", 10, y += dy);\r\n            this.ctx.fillText(\"a/s - switch between areas\", 10, y += dy);\r\n            this.ctx.fillText(\"r - to restore initial polygon\", 10, y += dy);\r\n            this.ctx.fillText(\"i - show/hide polygons square value\", 10, y += dy);\r\n            this.ctx.fillText(\"c - to cut area as black cut line shows\", 10, y += dy);\r\n            this.ctx.fillText(\"h - show/hide this text\", 10, y += dy);\r\n            this.ctx.fillText(\"Mouse wheel to adjust this.scale\", 10, y += dy);\r\n            this.ctx.fillText(\"Left mouse click and drag'n'drop on background to move all scene\", 10, y += dy);\r\n            this.ctx.fillText(\"Left mouse click and drag'n'drop on vertex to move vertices\", 10, y += dy);\r\n            this.ctx.fillText(\"Right mouse click to select nearest polygon\", 10, y += dy);\r\n            this.ctx.fillText(\"Middle mouse click to split edge of selected polygon\", 10, y + dy);\r\n        }\r\n        this.ctx.save();\r\n        this.ctx.translate(this.offset_x, this.offset_y);\r\n        this.ctx.scale(this.scale, this.scale);\r\n\r\n        for (var i = 0; i < this.polygons.length; i++) {\r\n            var color = this.polygons_color[i % this.polygons_color.length];\r\n            //if(i==this.selectedPolygon)color=\"red\";\r\n            this.ctx.strokeStyle = color;\r\n            this.ctx.fillStyle = color;\r\n            //this.ctx.fillStyle.opacity= 1;\r\n            this.ctx.lineWidth = 1;\r\n            this.drawPoly(this.polygons[i]);\r\n            if (this.showInfo) {\r\n                var p = this.polygons[i].countCenter();\r\n                this.ctx.font = \"normal 12px 'malgun gothic'\";\r\n\r\n                this.ctx.fillText(this.polygons[i].countSquare(), p.x, p.y);\r\n\r\n            }\r\n        }\r\n\r\n        //debugger;\r\n        var cut = new Line();\r\n        var splitReturn = this.polygons[this.selectedPolygon].split(this.squareToCut, cut);\r\n        var poly1 = splitReturn.poly1;\r\n        var poly2 = splitReturn.poly2;\r\n        cut = splitReturn.cutLine;\r\n        if (splitReturn.value) {\r\n            this.ctx.strokeStyle = \"black\";\r\n            this.ctx.lineWidth = 1.5;\r\n\r\n            this.ctx.beginPath();\r\n            this.ctx.moveTo(cut.getStart().x, cut.getStart().y);\r\n            this.ctx.lineTo(cut.getEnd().x, cut.getEnd().y);\r\n            this.ctx.closePath();\r\n            this.ctx.stroke();\r\n\r\n        }\r\n\r\n        if (this.showInfo) {\r\n            var np = this.polygons[this.selectedPolygon].findNearestPoint(this.mouse);\r\n            if (typeof np !== 'undefined' && np !== null && typeof np.x === \"number\") {\r\n                this.ctx.strokeStyle = \"rgba(0,0,0,0.5)\";\r\n                this.ctx.lineWidth = 1;\r\n                this.ctx.beginPath();\r\n                this.ctx.moveTo(this.mouse.x, this.mouse.y);\r\n                this.ctx.lineTo(np.x, np.y);\r\n                this.ctx.closePath();\r\n                this.ctx.stroke();\r\n            }\r\n\r\n        }\r\n\r\n        this.ctx.strokeStyle = \"rgba(250,0,0,0.5)\";\r\n\r\n        this.ctx.lineWidth = this.pointOutlineSize;\r\n        this.drawPoly(this.polygons[this.selectedPolygon]);\r\n        for (var i = 0, cnt = this.polygons[this.selectedPolygon].size(); i < cnt; i++) {\r\n            var p = this.polygons[this.selectedPolygon].get(i);\r\n            this.drawCircle(this.ctx, p.x, p.y, this.pointSize);\r\n            if (this.selectedPoint === i) {\r\n                this.ctx.fillStyle = \"rgba(255,255,0,0.9)\";\r\n                this.ctx.fill();\r\n            } else {\r\n                this.ctx.fillStyle = \"rgba(255,255,255,1)\";\r\n                this.ctx.fill();\r\n            }\r\n            this.ctx.stroke();\r\n        }\r\n\r\n        this.ctx.restore();\r\n    };\r\n\r\n    paint = this.paintEvent;\r\n\r\n\r\n    mouseMoveEvent = (e) => {\r\n        if (this.mouseLeftPress && this.selectedPolygon != -1 && this.selectedPoint != -1) {\r\n            this.polygons[this.selectedPolygon].get(this.selectedPoint).x = this.polygons[this.selectedPolygon].get(this.selectedPoint).x + (e.clientX - this.mouse_x) / this.scale;\r\n            this.polygons[this.selectedPolygon].get(this.selectedPoint).y = this.polygons[this.selectedPolygon].get(this.selectedPoint).y + (e.clientY - this.mouse_y) / this.scale;\r\n        } else if (this.mouseLeftPress) {\r\n            this.offset_x = this.offset_x + (e.clientX - this.mouse_x);\r\n            this.offset_y = this.offset_y + (e.clientY - this.mouse_y);\r\n        }\r\n\r\n        this.mouse_x = e.clientX;\r\n        this.mouse_y = e.clientY;\r\n        this.mouse = new Vector((e.clientX - this.offset_x) / this.scale, (e.clientY - this.offset_y) / this.scale, 0);\r\n\r\n        if (this.selectedPolygon != -1) {\r\n            for (var i = 0, cnt = this.polygons[this.selectedPolygon].size(); i < cnt; i++) {\r\n                var p = this.polygons[this.selectedPolygon].get(i);\r\n                var ptocLength = this.mouse.subtraction(p).length();\r\n                if (ptocLength < this.pointSize + this.pointOutlineSize) {\r\n                    this.selectedPoint = i;\r\n\r\n                    this.paint();\r\n                    return;\r\n                }\r\n            }\r\n            this.selectedPoint = -1;\r\n        }\r\n\r\n\r\n        this.paint();\r\n    };\r\n\r\n\r\n    mouseReleaseEvent = (e) => {\r\n        if (e.button == 0) {\r\n            console.log(\"lmouseup\");\r\n            this.mouseLeftPress = 0;\r\n            this.selectedPoint = -1;\r\n        }\r\n        if (e.button == 1) {\r\n            console.log(\"mmouseup\");\r\n\r\n        }\r\n\r\n        if (e.button == 2) {\r\n            console.log(\"rmouseup\");\r\n\r\n        }\r\n\r\n        return false;\r\n    };\r\n\r\n    wheelEvent = (e) => {\r\n\r\n\r\n        var delta = e.deltaY > 0 ? 1 : (e.deltaY < 0 ? -1 : 0);\r\n\r\n        if (typeof delta === 'number' && delta != 0) {\r\n            this.scale += 5 * this.scale / (delta * 100);\r\n            this.paint();\r\n        }\r\n\r\n        return false;\r\n    };\r\n\r\n    /**\r\n     * \r\n     * @param e\r\n     * @returns {boolean}\r\n     */\r\n    mousePressEvent = (e) => {\r\n        // console.log(e);\r\n        this.mouse_x = e.clientX;\r\n        this.mouse_y = e.clientY;\r\n\r\n        this.mouse = new Vector((e.clientX - this.offset_x) / this.scale, (e.clientY - this.offset_y) / this.scale, 0);\r\n\r\n        if (e.button == 0/*lbtn*/) {\r\n            console.log(\"lbtn down\");\r\n            this.mouseLeftPress = 1;\r\n            for (var i = 0, cnt = this.polygons[this.selectedPolygon].size(); i < cnt; i++) {\r\n                var p = this.polygons[this.selectedPolygon].get(i);\r\n                if (this.mouse.subtraction(p).length() < this.pointSize + this.pointOutlineSize) {\r\n                    this.selectedPoint = i;\r\n                    this.paint();\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (e.button == 1/*mbtn*/) {\r\n            console.log(\"mbtn down\");\r\n            if (this.selectedPolygon != -1 && this.mouse instanceof Vector) {\r\n                this.polygons[this.selectedPolygon].splitNearestEdge(this.mouse);\r\n                this.paint();\r\n            }\r\n        }\r\n\r\n        if (e.button == 2/*rbtn*/) {\r\n            console.log(\"rbtn down\");\r\n            var minDist = Number.MAX_VALUE;\r\n            for (var i = 0, cnt = this.polygons.length; i < cnt; i++) {\r\n                var dist = this.polygons[i].findDistance(this.mouse);\r\n                if (dist < minDist) {\r\n                    minDist = dist;\r\n                    this.selectedPolygon = i;\r\n                }\r\n            }\r\n            this.squareToCut = this.polygons[this.selectedPolygon].countSquare() / 2.0;\r\n            this.paint();\r\n        }\r\n        return false;\r\n    };\r\n\r\n\r\n\r\n    keyPressEvent = (e) => {\r\n        console.log(\"keyevent: \", e);\r\n        if (e.keyCode == 81/*Q*/) {\r\n            this.squareToCut += (e.shiftKey ? 1000 : 100);\r\n            this.paint();\r\n        }\r\n\r\n        if (e.keyCode == 87/*W*/) {\r\n            var t = this.squareToCut - (e.shiftKey ? 1000 : 100);\r\n            this.squareToCut = t < 10 ? 10 : t;\r\n            this.paint();\r\n        }\r\n        if (e.keyCode == 67/*C*/) {\r\n            var splitReuslt = this.polygons[this.selectedPolygon].split(this.squareToCut);\r\n            var poly1 = splitReuslt.poly1, poly2 = splitReuslt.poly2;\r\n            var cut = splitReuslt.cutLine;\r\n            if (splitReuslt.value) {\r\n                this.polygons[this.selectedPolygon] = poly1;\r\n                this.polygons.push(poly2);\r\n\r\n                if (poly1.countSquare() < poly2.countSquare()) {\r\n                    this.selectedPolygon = this.polygons.length - 1;\r\n                }\r\n\r\n                this.paint();\r\n            }\r\n        }\r\n        if (e.keyCode == 80/*P*/) {\r\n            for (var i = 0, cnt = this.polygons[this.selectedPolygon].length; i < cnt; i++) {\r\n                var p = this.polygons[this.selectedPolygon].get(i);//vector\r\n            }\r\n            this.paint();\r\n        }\r\n\r\n        if (e.keyCode == 65/*A*/) {\r\n            if (this.selectedPolygon > 0)\r\n                this.selectedPolygon--;\r\n            this.paint();\r\n        }\r\n\r\n        if (e.keyCode == 83/*S*/) {\r\n            if (this.selectedPolygon < Math.round(this.polygons.length - 1))\r\n                this.selectedPolygon++;\r\n            this.paint();\r\n        }\r\n\r\n        if (e.keyCode == 82/*R*/) {\r\n            this.initPolygons();\r\n            this.paint();\r\n        }\r\n\r\n        if (e.keyCode == 73/*I*/) {\r\n            this.showInfo = !this.showInfo;\r\n            this.paint();\r\n        }\r\n\r\n        if (e.keyCode == 72/*H*/) {\r\n            this.showHelp = !this.showHelp;\r\n            this.paint();\r\n        }\r\n\r\n    };\r\n\r\n    initPolygons = () => {\r\n        this.polygons = new Array();\r\n        this.polygons.push(new Polygon());\r\n        this.polygons[0].push_back(new Vector(450.0, 100.0, 0));\r\n        this.polygons[0].push_back(new Vector(900.0, 100.0, 0));\r\n        this.polygons[0].push_back(new Vector(900.0, 400.0, 0));\r\n        this.polygons[0].push_back(new Vector(450.0, 400.0, 0));\r\n        this.polygons.push(new Polygon());\r\n        this.polygons[1].push_back(new Vector(900.0, 420.0, 0));\r\n        this.polygons[1].push_back(new Vector(900.0, 600.0, 0));\r\n        this.polygons[1].push_back(new Vector(450.0, 600.0, 0));\r\n        this.polygons[1].push_back(new Vector(450.0, 420.0, 0));\r\n        this.squareToCut = this.polygons[0].countSquare() / 47.0;\r\n        this.selectedPolygon = 0;\r\n    };\r\n\r\n    drawCircle = (context, centerX, centerY, r) => {\r\n        // draw the colored region\r\n        context.beginPath();\r\n        context.arc(centerX, centerY, r, 0, 2 * Math.PI, true);\r\n        context.closePath();\r\n    }\r\n};","import RenderArea from \"../app/renderArea.js\";\r\n\r\nlet renderArea;\r\nconst ctx = document.getElementById(\"cvs\").getContext(\"2d\");\r\n\r\nctx.canvas.width = window.innerWidth;\r\nctx.canvas.height = window.innerHeight;\r\nwindow.onresize = function () {\r\n    ctx.canvas.width = window.innerWidth;\r\n    ctx.canvas.height = window.innerHeight;\r\n    canvasSize = { top: 0, left: 0, width: window.innerWidth, height: window.innerHeight };\r\n    console.log(\"onresize\");\r\n};\r\n\r\nwindow.onload = function () {\r\n    renderArea = new RenderArea({ ctx });\r\n    renderArea.initPolygons();\r\n    renderArea.paint();\r\n\r\n    document.onkeyup = renderArea.keyPressEvent;\r\n    document.getElementById(\"cvs\").onwheel = renderArea.wheelEvent;\r\n    document.getElementById(\"cvs\").onmousemove = renderArea.mouseMoveEvent;\r\n    document.getElementById(\"cvs\").onmouseup = renderArea.mouseReleaseEvent;\r\n    document.getElementById(\"cvs\").onmousedown = renderArea.mousePressEvent;\r\n    document.getElementById(\"cvs\").oncontextmenu = function () { return false; };\r\n\r\n}\r\n\r\n\r\n\r\n\r\n"]}